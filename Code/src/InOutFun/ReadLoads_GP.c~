#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "../ToolsLib/TypeDefinitions.h"
#include "../ToolsLib/GlobalVariables.h"
#include "../ToolsLib/Utils.h"
#include "InOutFun.h"


Curve ReadLoads_GP(char * Name_File)
/*
  Read the external forces file :
  Inputs
  - Name_file : Name of the file
  FORMAT example : 
  LOAD_VALUE VALUE#double DIM#integer
  LIST_NODES NLIST#integer
  .
  . integer (NLIST)
  .
  END LIST_NODES
  NORM_VALUE NVALUE#integer
  .
  . double (NVALUE)
  .
  END NORM_VALUE  
*/
{
  /* Define load curve */
  Curve LoadCurve;
  
  /* Define simulation file */
  FILE * Sim_dat;

  /* Auxiliar variable for reading the lines in the files */
  char line[MAXC] = {0};
  char line_nodes[MAXC] = {0};
  char line_values[MAXC] = {0};
  
  /* Number of element in the line , just for check */
  int nkwords,nparam;
  char * kwords[MAXW] = {NULL};
  char * param[MAXW] = {NULL};

  printf("************************************************* \n");
  printf("Begin of read a load curve !!! \n");
  printf(" * Begin of load curve file : %s \n",Name_File);
  printf(" * Load curve values : \n");

  /* Open and check .load file */
  Sim_dat = fopen(Name_File,"r");  
  if (Sim_dat==NULL){
    puts("Error during the lecture of .load file");
    exit(0);
  }

  while( fgets(line, sizeof line, Sim_dat) != NULL ){

    /* Read the line with the space as separators */
    nkwords = parse (kwords, line," \n");

    if ( strcmp(kwords[0],"LOAD_VALUE") == 0 ){
      for(int i  = 1 ; i<nkwords ; i++){ /* Loop over the words */
	nparam = parse (param,kwords[i],"#\n");
	if(nparam == 2){
	  if(strcmp(param[0],"VALUE") == 0){
	    LoadCurve.Value = atof(param[1]);
	  }
	
	  if(strcmp(param[0],"DIM") == 0){
	    LoadCurve.Dim = atoi(param[1]);
	  }
	}	
      }
    }

    if ( strcmp(kwords[0],"LIST_NODES") == 0 ){

      /* Allocate the array of integer for the list of nodes */
      for(int i  = 1 ; i<nkwords ; i++){
	nparam = parse (param,kwords[i],"#\n");
	if(nparam == 2){
	  if(strcmp(param[0],"NLIST") == 0){
	    LoadCurve.NList = atoi(param[1]);
	    LoadCurve.List =
	      (int *)Allocate_Array(LoadCurve.NList,sizeof(int));
	  }
	}	
      }
      /* Fill the list of nodes */
      for(int i = 0 ; i<LoadCurve.NList ; i++){
	fgets(line_nodes, sizeof line_nodes, Sim_dat);
	nparam = parse (param,line_nodes," \n");
	if(nparam == 1){
	  LoadCurve.List[i] = atoi(param[0]);
	}
	else{
	  puts("Error in ReadLoads_GP() : Check the list of nodes ");
	  exit(0);
	}
      }
    }

    if ( strcmp(kwords[0],"NORM_VALUE") == 0 ){
      /* Allocate the array of double for the values */
      for(int i  = 1 ; i<nkwords ; i++){ 
	nparam = parse (param,kwords[i],"#\n");
	if(nparam == 2){
	  if(strcmp(param[0],"NVALUE") == 0){
	    LoadCurve.NValue = atoi(param[1]);
	    LoadCurve.NormValue =
	      (double *)Allocate_Array(LoadCurve.NormValue,sizeof(double));
	  }
	}	
      }
      /* Fill the values of the curve */
      for(int i = 0 ; i<LoadCurve.NValue ; i++){
	fgets(line_values, sizeof line_values, Sim_dat);
	nparam = parse (param,line_values," \n");
	if(nparam == 1){
	  LoadCurve.NormValue[i] = atof(param[0]);
	}
	else{
	  puts("Error in ReadLoads_GP() : Check the values of the curve ");
	  exit(0);
	}
      }
    }

    
  }/* End of read file */
  printf("End of read load curve file !!! \n");
  fclose(Sim_dat);

  return LoadCurve;
}
