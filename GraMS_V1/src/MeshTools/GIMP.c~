#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "../ToolsLib/TypeDefinitions.h"
#include "../MathTools/MathTools.h"


double uGIMP(double L, double lp, double Xp, double Xi){
  
  double S_Ip;
  
  if (-L+lp < Xp-Xi <= -lp){
    S_Ip = 1 + (Xp-Xi)/L;
  }
  else if (lp < Xp-Xi <= L-lp){
    S_Ip = 1 - (Xp-Xi)/L;
  }
  else if (-lp < Xp-Xi <= lp){
    S_Ip = 1 - ((Xp-Xi)*(Xp-Xi) + lp*lp)/(2*L*lp);
  }
  else if (-L-lp < Xp-Xi <= -L+lp){
    S_Ip = ((L+lp+Xp-Xi)*(L+lp+Xp-Xi))/(1/(4*L*lp));
  }
  else if (L-lp < Xp-Xi <= L+lp){
    S_Ip = ((L+lp-Xp+Xi)*(L+lp-Xp+Xi))/(4*L*lp);
  }
  else if (fabs(Xp-Xi) >= L+lp){
    S_Ip = 0;
  }
  
  return S_Ip;
}


double d_uGIMP(double L, double lp, double Xp, double Xi){
  
  double dS_Ip;
  
  if (-L+lp < Xp-Xi <= -lp){
    dS_Ip = 1/L;
  }
  else if (lp < Xp-Xi <= L-lp){
    dS_Ip = 1/L;
  }
  else if (-lp < Xp-Xi <= lp){
    dS_Ip = - (Xp-Xi)/(L*lp);
  }
  else if (-L-lp < Xp-Xi <= -L+lp){
    dS_Ip = (L+lp+Xp-Xi)/(2*L*lp);
  }
  else if (L-lp < Xp-Xi <= L+lp){
    dS_Ip = (L+lp-Xp+Xi)/(4*L*lp);
  }
  else if (fabs(Xp-Xi) >= L+lp){
    dS_Ip = 0;
  }
  
  return dS_Ip;
}

Matrix uGIMP_2D(Matrix Xp, Matrix lp, List Nodes, Mesh FEM_Mesh){

  /* Variable declaration */
  Matrix S_Ip = MatAlloc(1,Nodes.Num);
  Matrix Xi = MatAlloc(1,2);
  Matrix L = MatAlloc(1,2);

  /* */
  for(int i = 0 ; i<Nodes.Num ; i++){
    S_Ip.nV[i] =
      uGIMP(L.nV[0], lp.nV[0], Xp.nV[0], Xi.nV[0])*
      uGIMP(L.nV[1], lp.nV[1], Xp.nV[1], Xi.nV[1]);
  }

  /* Free memory */
  FreeMat(Xi);
  FreeMat(L);

  /* Output */
  return S_Ip;
}

/* double uGIMP_2D(Matrix L, Matrix lp, Matrix Xp, Matrix Xi){ */

/*   double S_Ip; */
  
/*   S_Ip = */
/*     uGIMP(L.nV[0], lp.nV[0], Xp.nV[0], Xi.nV[0])* */
/*     uGIMP(L.nV[1], lp.nV[1], Xp.nV[1], Xi.nV[1]); */

/*   return S_Ip; */
/* } */
